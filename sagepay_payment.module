<?php

/**
 * Implements hook_payment_method_controller_info().
 */
function sagepay_payment_payment_method_controller_info() {
  return array(
    '\Drupal\sagepay_payment\Controller',
  );
}

/**
 * Implements hook_menu().
 */
function sagepay_payment_menu() {
  $items = array();

  $items['sagepay_payment/notify'] = array(
    'title' => 'Notification',
    'page callback' => 'sagepay_payment_notification_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['sagepay_payment/finish/%entity_object'] = array(
    'title' => 'Notification',
    'page callback' => 'sagepay_payment_finish_callback',
    'load arguments' => array('payment'),
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
* Implements hook_libraries_info().
*
* for stripes php wrapper library.
*/
function sagepay_payment_libraries_info() {
  $libraries['sagepay-php'] = array(
    'name' => 'Sagepay',
    'vendor url' => 'https://sagepay.com//',
    'download url' => 'http://www.sagepay.co.uk/file/9981/download-document/VspPHPKit.zip',
    'version' => '3.0.0',
    'files' => array(
      'php' => array('sagepay.php')
    )
  );
  return $libraries;
}

function sagepay_payment_check_signature($vendor_name, $security_key, $data) {
  $data['VendorName'] = $vendor_name;
  $data['SecurityKey'] = $security_key;

  $keys = array(
    'VPSTxId', 'VendorTxCode', 'Status', 'TxAuthNo', 'VendorName', 'AVSCV2',
    'SecurityKey', 'AddressResult', 'PostCodeResult', 'CV2Result', 'GiftAid',
    '3DSecureStatus', 'CAVV', 'AddressStatus', 'PayerStatus', 'CardType',
    'Last4Digits', 'DeclineCode', 'ExpiryDate', 'FraudResponse', 'BankAuthCode'
  );
  $str = '';
  foreach ($keys as $key) {
    $str .= isset($data[$key]) ? $data[$key] : '';
  }
  return strtoupper(md5($str)) === $data['VPSSignature'];
}

function sagepay_payment_notification_callback() {
  $vpstxid = check_plain($_POST['VPSTxId']);
  $info = db_select('sagepay_payment_payments', 's')
    ->condition('vpstxid', $vpstxid)
    ->fields('s', array('pid', 'securitykey'))
    ->execute()
    ->fetchAssoc();
  $payment = entity_load('payment', array($info['pid']))[$info['pid']];

  switch ($_POST['Status']) {
    case 'OK': // if the transaction was authorised.
    case 'PENDING': // (for European Payment Types only), if the transaction
      // ...has yet to be accepted or rejected.
      if (sagepay_payment_check_signature(
          $payment->method->controller_data['vendorname'],
          $info['securitykey'],
          $_POST)) {
        $payment->setStatus(new \PaymentStatusItem(PAYMENT_STATUS_SUCCESS));
        $status = 'OK';
      } else {
        $payment->setStatus(new \PaymentStatusItem(PAYMENT_STATUS_FAILED));
        $status = 'ERROR';
      }
      break;
    case 'NOTAUTHED': // if the authorisation was failed by the bank.
    case 'REJECTED': // if your fraud screening rules were not met.
    case 'ABORT': // if the user decided to cancel the transaction whilst
      // ...on our payment pages.
    case 'ERROR': // if an error has occurred at Sage Pay. These are very
      // infrequent, but your site should handle them anyway. They normally
      // indicate a problem with bank connectivity.
    default:
      watchdog('sagepay_payment', 'Sagepay-error: @status -> @detail', array('@status' => $_POST['Status'],  '@detail' => $_POST['StatusDetail']), WATCHDOG_ERROR);
      $payment->setStatus(new \PaymentStatusItem(PAYMENT_STATUS_FAILED));
      $status = 'ERROR';
      break;
  }
  entity_save('payment', $payment);
  echo 'Status=' . $status . PHP_EOL . 'RedirectURL=' . $GLOBALS['base_url'] . '/sagepay_payment/finish/' . $payment->pid;
}

function sagepay_payment_finish_callback($payment) {
  $payment->finish();
}

/**
 * Implements hook_entity_load().
 */
function sagepay_payment_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'payment_method') {
    \Drupal\sagepay_payment\Controller::load($entities);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function sagepay_payment_payment_method_insert(PaymentMethod $method) {
  if ($method->controller instanceof \Drupal\sagepay_payment\Controller)
    $method->controller->insert($method);
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function sagepay_payment_payment_method_update(PaymentMethod $method) {
  if ($method->controller instanceof \Drupal\sagepay_payment\Controller)
    $method->controller->update($method);
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function sagepay_payment_payment_method_delete($method) {
  if ($method->controller instanceof \Drupal\sagepay_payment\Controller)
    $method->controller->delete($method);
}

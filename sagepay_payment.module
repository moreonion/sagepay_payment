<?php

use Drupal\sagepay_payment\Controller;
use Drupal\sagepay_payment\NotificationStatus;

/**
 * Implements hook_payment_method_controller_info().
 */
function sagepay_payment_payment_method_controller_info() {
  return array(
    '\Drupal\sagepay_payment\Controller',
  );
}

/**
 * Implements hook_menu().
 */
function sagepay_payment_menu() {
  $items = array();

  $items['sagepay_payment/notify'] = array(
    'title' => 'Notification',
    'page callback' => 'sagepay_payment_notification_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'delivery callback' => 'sagepay_payment_deliver_notification',
  );

  $items['sagepay_payment/finish/%entity_object/%'] = array(
    'title' => 'Return from SagePay’s payment pages',
    'page callback' => 'sagepay_payment_finish_callback',
    'load arguments' => array('payment'),
    'page arguments' => array(2),
    'access callback' => 'sagepay_payment_check_hash',
    'access arguments' => [2, 3],
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function sagepay_payment_check_signature($vendor_name, $security_key, $data) {
  $data['VendorName'] = $vendor_name;
  $data['SecurityKey'] = $security_key;

  $keys = array(
    'VPSTxId', 'VendorTxCode', 'Status', 'TxAuthNo', 'VendorName', 'AVSCV2',
    'SecurityKey', 'AddressResult', 'PostCodeResult', 'CV2Result', 'GiftAid',
    '3DSecureStatus', 'CAVV', 'AddressStatus', 'PayerStatus', 'CardType',
    'Last4Digits', 'DeclineCode', 'ExpiryDate', 'FraudResponse', 'BankAuthCode'
  );
  $str = '';
  foreach ($keys as $key) {
    $str .= isset($data[$key]) ? $data[$key] : '';
  }
  return strtoupper(md5($str)) === $data['VPSSignature'];
}

function sagepay_payment_notification_callback() {
  if (!isset($_POST['VPSTxId']) || !isset($_POST['Status'])) {
    watchdog('sagepay_payment', 'Invalid request to the notification callback.', [], WATCHDOG_ERROR);
    return NotificationStatus::invalid('Invalid request.');
  }
  $vpstxid = check_plain($_POST['VPSTxId']);
  $info = db_select('sagepay_payment_payments', 's')
    ->condition('vpstxid', $vpstxid)
    ->fields('s', array('pid', 'securitykey'))
    ->execute()
    ->fetchAssoc();
  if (!$info) {
    watchdog('sagepay_payment', 'Received notification with unknown VPSTxId.', [], WATCHDOG_ERROR);
    return NotificationStatus::invalid('Unknown VPSTxId.');
  }
  $payment = entity_load_single('payment', $info['pid']);
  if (!$payment) {
    watchdog('sagepay_payment', 'Could not load payment for VPSTxId.', [], WATCHDOG_ERROR);
    return NotificationStatus::error('Payment data not found.');
  }
  $vendor = $payment->method->controller_data['vendorname'];
  if (!sagepay_payment_check_signature($vendor, $info['securitykey'], $_POST)) {
    watchdog('sagepay_payment', 'Invalid signature.', [], WATCHDOG_ERROR);
    return NotificationStatus::invalid('Invalid signature.');
  }

  switch ($_POST['Status']) {
    case 'OK':
      // The transaction was authorised.
    case 'PENDING':
      // The transaction has yet to be accepted or rejected.
      // (European Payment Types only)
      $payment->setStatus(new \PaymentStatusItem(PAYMENT_STATUS_SUCCESS));
      entity_save('payment', $payment);
      return NotificationStatus::ok($payment, 'Success');

    case 'NOTAUTHED':
      // The authorisation was failed by the bank.
    case 'REJECTED':
      // Fraud screening rules were not met.
    case 'ABORT':
      // The user decided to cancel the transaction whilst on the payment pages.
    case 'ERROR':
      // An error occurred on the SagePay side.
    default:
      watchdog('sagepay_payment', 'Sagepay-error: @status -> @detail', array('@status' => $_POST['Status'],  '@detail' => $_POST['StatusDetail']), WATCHDOG_ERROR);
      $payment->setStatus(new \PaymentStatusItem(PAYMENT_STATUS_FAILED));
      entity_save('payment', $payment);
      return NotificationStatus::ok($payment, 'Failed');
  }
}

/**
 * Delivery callback for notification requests.
 */
function sagepay_payment_deliver_notification($response) {
  if (!($response instanceof NotificationStatus)) {
    $response = NotificationStatus::error($response);
  }
  echo $response->response();
  drupal_page_footer();
}

/**
 * Generate the HMAC signature for a payment.
 *
 * @param int $pid
 *   The payment ID.
 *
 * @return string
 *   A base64 encoded HMAC signature unique for this payment ID.
 */
function sagepay_payment_signature($pid) {
  $data = "sagepay_payment.$pid";
  $key = drupal_get_private_key() . drupal_get_hash_salt();
  return drupal_hmac_base64($data, $key);
}

/**
 * Access callback: Check the payment signature.
 *
 * @param \Payment $payment
 *   The payment for which the user should be authorized.
 * @param string $hash
 *   The hash to check.
 *
 * @see sagepay_payment_menu()
 */
function sagepay_payment_check_hash($payment, $hash) {
  return $payment->pid && $hash == sagepay_payment_signature($payment->pid);
}

/**
 * Page callback: Return from Sagepay’s payment pages.
 *
 * @param \Payment $payment
 *   The payment for which the user is being redirected.
 *
 * @see sagepay_payment_menu()
 */
function sagepay_payment_finish_callback($payment) {
  $payment->finish();
}

/**
 * Implements hook_entity_load().
 */
function sagepay_payment_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'payment') {
    $q = db_select('sagepay_payment_payments', 't');
    $q->fields('t')->condition('t.pid', array_keys($entities));
    $result = $q->execute();
    while ($data = $result->fetchAssoc()) {
      $payment = $entities[$data['pid']];
      unset($data['pid']);
      $payment->sagepay = $data;
    }
  }
}

/**
 * Implements hook_payment_insert().
 */
function sagepay_payment_payment_payment_insert(\Payment $payment) {
  if ($payment->method->controller instanceof Controller) {
    if (!empty($payment->sagepay)) {
      $data = $payment->sagepay;
      $data['pid'] = $payment->pid;
      db_insert('sagepay_payment_payments')->fields($data)->execute();
    }
  }
}

/**
 * Implements hook_payment_update().
 */
function sagepay_payment_payment_update(\Payment $payment) {
  if ($payment->method->controller instanceof Controller) {
    if (!empty($payment->sagepay)) {
      db_merge('sagepay_payment_payments')
        ->key(['pid' => $payment->pid])
        ->fields($payment->sagepay)
        ->execute();
    }
  }
}

/**
 * Implements hook_payment_delete().
 */
function sagepay_payment_payment_delete(\Payment $payment) {
  db_delete('sagepay_payment_payments')->condition('pid', $payment->pid)->execute();
}
